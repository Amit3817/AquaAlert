const User=require('../model/user');
const Device=require("../model/device")
const { validationResult } = require('express-validator');


const getAll=async (req,res,next)=>{
   try{
    const device=await Device.find({userId:req.user._id});
     if(device)
     {
        return res.json({success:true,device:device,token:req.user.token});
     }
     else{
        return res.json({success:false,msg:"Failed to load Device"});
     }
   }
catch(error){
   console.log(error);
   next(error);

}
}

const getOne=async (req,res,next)=>{
   try{
    const deviceId=req.query.deviceId
    const device=await Device.find({_id:deviceId});
     if(device)
     {
        return res.json({success:true,device:device,token:req.user.token});
     }
     else{
        return res.json({success:false,msg:"Failed to load Device"});
     }
   }
catch(error){
   console.log(error);
   next(error);
}
}

const create=async (req,res,next)=>{
    try{
        const {deviceName,rate,pressure,roomId}=req.body;
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      const error = new Error('Validation failed.');
      error.statusCode = 422;
      error.data = errors.array();
      next(error);
    }
     const device= await Device.create({
        deviceName:deviceName,
        rate:rate,
        pressure:pressure,
        userId:req.user._id,
        roomId:roomId     
     });
     if(device)
     {
        return res.json({success:true,msg:"Device created successfully",token:req.user.token});
     }
     else{
        return res.json({success:false,msg:"Failed to create Device"});
     }
   }
catch(error){
   console.log(error);
   next(error);

}
}




const update=async (req,res,next)=>{
    try{
       const {deviceId,deviceName,rate,pressure}=req.body;
       const device=await Device.find({_id:deviceId});
       if(!device){
          return res.json({success:false,message:"Device not found"});
       }
       const updated= await Device.updateOne({_id:deviceId},{
          $set:{
             deviceName,
             rate,
             pressure
          }});
          if(updated)
          {
            return res.json({success:true,message:"Device updated",token:req.user.token});
          }
          else{
            return res.json({success:false,message:"Device not updated"});
          }
    }
    catch(err)
    {
       console.log(err);
       next(err);
    }
 }

 const remove=async (req,res,next)=>{
    try{
     const deviceId=req.query.deviceId
     const device=await Device.deleteOne({_id:deviceId});
      if(device)
      {

         return res.json({success:true,msg:"Device deleted",token:req.user.token});
      }
      else{
         return res.json({success:false,msg:"Failed to delete Device"});
      }
    }
 catch(error){
    console.log(error);
    next(error);
 }
 }

 module.exports={
    create,
    getAll,
    getOne,
    update,
    remove
 }
